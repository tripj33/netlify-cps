---
layout: layouts/servicesSearch/servicesSearch
eleventyExcludeFromCollections: true
serviceType: New Construction Plumbing
serviceImage: building-a-new-home
title: New Construction Plumbing Services
headercontent: Building a home is no small feat. Planning and exploring options can be a stressful part of the process. Let us take some of that stress away by being there every step of the way. From planning and designing, to your move-in date, we will be there as your trusted advisors through the building process. 
headingText: Let us help you build your dream home
buttonText: Get A Custom Quote
buttonIcon: fad fa-quote-left
buttonURL:
tags:
    - newConstructionServices
---

<script>
  var sourceData = [
  
  {% for service in collections.newConstructionlServices %}
      
        {
        service_name: "{{service.data.title}}",
        service_snippet: "{{service.data.snippet}}",
         service_image: "{{service.data.serviceInfo.image}}",
        service_link: "/services/new-construction-services{{service.data.slug}}"
        },
     {% endfor %}
  ];
  var sourceData1 = [
      
  {% for service in collections.article %}
      
        {
        article_name: "{{article.data.title}}",
        article_snippet: "{{article.data.snippet}}",
        article_image: "{{article.data.image}}",
        article_link: "{{article.data.slug}}"
        },
     {% endfor %}
    
  ];
  let text = "";

  function loadEmployees() {
    return {
      search: "",
      test: "test",
      results: {
        services: {
          search: "",
          pageNumber: 0,
          size: 10,
          total: "",
          myForData: sourceData,
          get filteredResults() {
            const start = this.pageNumber * this.size,
              end = start + this.size;
            if (this.search === "") {
              this.total = this.myForData.length;
              return this.myForData.slice(start, end);
            }
            console.log(this.search)
            //Return the total results of the filters
            this.total = this.myForData.filter((item) => {
              return item.service_name
                .toLowerCase()
                .includes(this.search.toLowerCase());
            }).length;
            console.log("this.total = " + this.total)
            //Return the filtered data
            // return item.service_name&&item.employee_salary
            return this.myForData
              .filter((item) => {
                return item.service_name 
                  .toLowerCase()
                  .includes(this.search.toLowerCase());
              })
              .slice(start, end);
          },
          //Create array of all pages (for loop to display page numbers)
          pages() {
            return Array.from({
              length: Math.ceil(this.total / this.size),
            });
          },
          //Next Page
          nextPage() {
            this.pageNumber++;
          },
          //Previous Page
          prevPage() {
            this.pageNumber--;
          },
          //Total number of pages
          pageCount() {
            return Math.ceil(this.total / this.size);
          },
          //Return the start range of the paginated results
          startResults() {
            return this.pageNumber * this.size + 1;
          },
          //Return the end range of the paginated results
          endResults() {
            let resultsOnPage = (this.pageNumber + 1) * this.size;
            if (resultsOnPage <= this.total) {
              return resultsOnPage;
            }
            return this.total;
          },
          //Link to navigate to page
          viewPage(index) {
            this.pageNumber = index;
          },
        },
        articles: {
          search: "",
          pageNumber: 0,
          size: 3,
          total: "",
          myForData: sourceData1,
          get filteredResults() {
            const start = this.pageNumber * this.size,
              end = start + this.size;
            if (this.search === "") {
              this.total = this.myForData.length;
              return this.myForData.slice(start, end);
            }
            console.log(this.search)
            //Return the total results of the filters
            this.total = this.myForData.filter((item) => {
              return item.service_name
                .toLowerCase()
                .includes(this.search.toLowerCase());
            }).length;
            console.log("this.total = " + this.total)
            //Return the filtered data
            return this.myForData
              .filter((item) => {
                return item.service_name
                  .toLowerCase()
                  .includes(this.search.toLowerCase());
              })
              .slice(start, end);
          },
          //Create array of all pages (for loop to display page numbers)
          pages() {
            return Array.from({
              length: Math.ceil(this.total / this.size),
            });
          },
          //Next Page
          nextPage() {
            this.pageNumber++;
          },
          //Previous Page
          prevPage() {
            this.pageNumber--;
          },
          //Total number of pages
          pageCount() {
            return Math.ceil(this.total / this.size);
          },
          //Return the start range of the paginated results
          startResults() {
            return this.pageNumber * this.size + 1;
          },
          //Return the end range of the paginated results
          endResults() {
            let resultsOnPage = (this.pageNumber + 1) * this.size;
            if (resultsOnPage <= this.total) {
              return resultsOnPage;
            }
            return this.total;
          },
          //Link to navigate to page
          viewPage(index) {
            this.pageNumber = index;
          },
        },
        searchResults() {
          let search = "";
          this.services.search = search;
        }
      }
    };
  }
</script>